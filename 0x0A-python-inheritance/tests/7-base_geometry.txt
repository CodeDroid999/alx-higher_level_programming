=======================
Test 7-base_geometry.py
=======================

Experimenting with basic geometry.

=====
Tests
=====

Import `BaseGeometry()` from 7-base_geometry.py:

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Case #1: Not enough arguments passed :( :

	>>> BaseGeometry() #doctest: +ELLIPSIS
	<7-base_geometry.BaseGeometry object at 0x...>
	>>> print(dir(BaseGeometry))
	['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'area', 'integer_validator']
	>>> BaseGeometry().area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented
	>>> area()
	Traceback (most recent call last):
	...
	NameError: name 'area' is not defined
	>>> BaseGeometry().integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
	>>> integer_validator()
	Traceback (most recent call last):
	...
	NameError: name 'integer_validator' is not defined
	>>> bg = BaseGeometry()
	>>> print(dir(bg))
	['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'area', 'integer_validator']
	>>> bg #doctest: +ELLIPSIS
	<7-base_geometry.BaseGeometry object at 0x...>
	>>> bg.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented
	>>> bg.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
	>>> BaseGeometry().integer_validator('butter')
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'
	>>> bg.integer_validator('dog')
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Case #2: `name` is not exactly a string:

	>>> BaseGeometry().integer_validator('butter', 69)
	>>> bg.integer_validator('butter', 69)
	>>> BaseGeometry().integer_validator(6.9, 69)
	>>> bg.integer_validator(6.9, 69)
	>>> BaseGeometry().integer_validator(69, 69)
	>>> bg.integer_validator(69, 69)
	>>> BaseGeometry().integer_validator(True, 69)
	>>> bg.integer_validator(True, 69)
	>>> BaseGeometry().integer_validator([1, 2, 3], 69)
	>>> bg.integer_validator([1, 2, 3], 69)
	>>> BaseGeometry().integer_validator(None, 69)
	>>> bg.integer_validator(None, 69)

Case #3: `value` is less than or equal to 0:

	>>> BaseGeometry().integer_validator('butter', 0)
	Traceback (most recent call last):
	...
	ValueError: butter must be greater than 0
	>>> bg.integer_validator('butter', 0)
	Traceback (most recent call last):
	...
	ValueError: butter must be greater than 0
	>>> BaseGeometry().integer_validator('butter', -420)
	Traceback (most recent call last):
	...
	ValueError: butter must be greater than 0
	>>> bg.integer_validator('butter', -420)
	Traceback (most recent call last):
	...
	ValueError: butter must be greater than 0

Case #4: `value` is not exactly an integer:

	>>> BaseGeometry().integer_validator('butter', 6.9)
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> bg.integer_validator('butter', 6.9)
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> BaseGeometry().integer_validator('butter', 'dog')
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> bg.integer_validator('butter', 'dog')
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> BaseGeometry().integer_validator('butter', True)
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> bg.integer_validator('butter', True)
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> BaseGeometry().integer_validator('butter', None)
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> bg.integer_validator('butter', None)
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> BaseGeometry().integer_validator('butter', (1, 3, 5))
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> bg.integer_validator('butter', (1, 3, 5))
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> BaseGeometry().integer_validator('butter', [1, 3, 5])
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> bg.integer_validator('butter', [1, 3, 5])
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> BaseGeometry().integer_validator('butter', {1, 3, 5})
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> bg.integer_validator('butter', {1, 3, 5})
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> BaseGeometry().integer_validator('butter', float("NaN"))
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> bg.integer_validator('butter', float("NaN"))
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer

Case #5: What about infinity?:

	>>> BaseGeometry().integer_validator('butter', float("inf"))
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
	>>> bg.integer_validator('butter', float("inf"))
	Traceback (most recent call last):
	...
	TypeError: butter must be an integer
